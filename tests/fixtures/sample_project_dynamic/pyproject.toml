[project]
name = "my-package"
version = "1.2.3"
description = "Some description."
readme = "README.rst"
requires-python = ">=3.6"
license = { text = "MIT" }
keywords = ["packaging", "dependency", "poetry"]
authors = [
    { name = "Sébastien Eustace", email = "sebastien@eustace.io" }
]
maintainers = [
    { name = "Sébastien Eustace", email = "sebastien@eustace.io" }
]
dynamic = [ "version", "readme", "dependencies", "classifiers" ]

[project.optional-dependencies]
db = [
    "orator ~=0.9"
]
network = [
    "requests[security] ~=2.18"
]

[project.urls]
homepage = "https://python-poetry.org"
repository = "https://github.com/python-poetry/poetry"
documentation = "https://python-poetry.org/docs"

[project.scripts]
my-script = "my_package:main"

[tool.poetry]
version = "1.2.3"
readme = "README.rst"
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

# Requirements
[tool.poetry.dependencies]
python = ">=3.6"
cleo = "^0.6"
pendulum = { git = "https://github.com/sdispater/pendulum.git", branch = "2.0" }
tomlkit = { git = "https://github.com/sdispater/tomlkit.git", rev = "3bff550", develop = true }
pathlib2 = { version = "^2.2", python = "~2.7" }

# File dependency
demo = { path = "../distributions/demo-0.1.0-py2.py3-none-any.whl" }

# Dir dependency with setup.py
my-package = { path = "../project_with_setup/" }

# Dir dependency with pyproject.toml
simple-project = { path = "../simple_project/" }

# Dependency with markers
functools32 = { version = "^3.2.3", markers = "python_version ~= '2.7' and sys_platform == 'win32' or python_version in '3.4 3.5'" }

# Dependency with python constraint
dataclasses = { version = "^0.7", python = ">=3.6.1,<3.7" }


# Non-regression test for https://github.com/python-poetry/poetry-core/pull/492.
# The underlying issue occurred because `tomlkit` can either return a TOML table as `Table` instance or an
# `OutOfOrderProxy` one, if a table is discontinuous and multiple sections of a table are separated by a non-related
# table, but we were too strict in our type check assertions.
# So adding `tool.black` here ensure that we have discontinuous tables, so that we don't re-introduce the issue caused
# by the type check assertion that ended up being reverted.
[tool.black]
preview = true

[tool.poetry.group.dev.dependencies]
pytest = "~3.4"


[tool.poetry.scripts]
my-script = "my_package:main"


[tool.poetry.plugins."blogtool.parsers"]
".rst" = "some_module::SomeClass"
